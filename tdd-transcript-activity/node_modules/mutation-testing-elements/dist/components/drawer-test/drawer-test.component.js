var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement, unsafeCSS } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { TestStatus } from 'mutation-testing-metrics';
import { renderIfPresent, getEmojiForTestStatus, renderIf, plural, describeLocation } from '../../lib/html-helpers';
import { bootstrap } from '../../style';
import style from './drawer-test.scss';
const describeMutant = (mutant) => html `${mutant.id} <code>${mutant.getMutatedLines()}</code> (${describeLocation(mutant)})`;
let MutationTestReportDrawerTestComponent = class MutationTestReportDrawerTestComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.mode = 'closed';
    }
    render() {
        return html `<mte-drawer ?hasDetail="${this.test?.killedMutants || this.test?.coveredMutants}" .mode="${this.mode}">
      ${renderIfPresent(this.test, (test) => html `
          <span slot="header"
            >${test.id} ${getEmojiForTestStatus(test.status)} ${test.name} [${test.status}]
            ${test.location ? html `(${test.location.start.line}:${test.location.start.column})` : ''}</span
          >
          <span slot="summary">${this.renderSummary()}</span>
          <span slot="detail">${this.renderDetail()}</span>
        `)}</mte-drawer
    >`;
    }
    renderSummary() {
        return html `<div class="d-flex mx-2">
      ${this.test?.killedMutants?.[0]
            ? html `<h6 class="pe-4"
            >üéØ Killed: ${describeMutant(this.test.killedMutants?.[0])}
            ${this.test.killedMutants.length > 1 ? html `(and ${this.test.killedMutants.length - 1} more)` : ''}</h6
          >`
            : ''}
      ${renderIfPresent(this.test?.coveredMutants, (coveredMutants) => html `<h6 class="pe-4">
            ‚òÇÔ∏è Covered ${coveredMutants.length} mutant${plural(coveredMutants)}
            ${renderIf(this.test?.status === TestStatus.Covering, "(yet didn't kill any of them)")}
          </h6>`)}
    </div>`;
    }
    renderDetail() {
        return html `<ul class="list-group">
      ${this.test?.killedMutants?.map((mutant) => html `<li title="This test killed this mutant" class="list-group-item">üéØ ${describeMutant(mutant)}</li>`)}
      ${this.test?.coveredMutants
            ?.filter((mutant) => !this.test?.killedMutants?.includes(mutant))
            .map((mutant) => html `<li class="list-group-item" title="This test covered this mutant">‚òÇÔ∏è ${describeMutant(mutant)}</li>`)}
    </ul>`;
    }
};
MutationTestReportDrawerTestComponent.styles = [bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportDrawerTestComponent.prototype, "test", void 0);
__decorate([
    property({ reflect: true })
], MutationTestReportDrawerTestComponent.prototype, "mode", void 0);
MutationTestReportDrawerTestComponent = __decorate([
    customElement('mte-drawer-test')
], MutationTestReportDrawerTestComponent);
export { MutationTestReportDrawerTestComponent };
//# sourceMappingURL=drawer-test.component.js.map